{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["genInsertionSortAnimations","array","size","animations","i","key","j","push","console","log","insertionSortHelper","length","genMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","SortingVisualizer","props","state","width","parseInt","window","innerWidth","height","innerHeight","algorithm","this","updateWindowDimensions","resetArray","setState","alg","bind","sortButton","document","getElementsByClassName","style","color","min","max","newArray","pad","random","title_in","type_in","message_in","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","totalSortingTime","call","setTimeout","sendNotification","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","backgroundColor","newHeight","background","barOneHeight","sort","compare","temp","bubbleSortHelper","swap","className","onClick","updateAlgorithm","mergeSort","insertionSort","bubbleSort","callSelectedSort","map","value","idx","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4983c0bd.chunk.js","sourcesContent":["export function genBubbleSortAnimations(array) {\n  const animations = [];\n  return bubbleSortHelper(array, array.length - 1, animations);\n}\n\nfunction bubbleSortHelper(array, size, animations) {\n  do {\n    var sort = false;\n    for (let i = 0; i < size; i++) {\n      var compare = [i, i + 1, false];\n      if (array[i] > array[i + 1]) {\n        const temp = array[i];\n        array[i] = array[i + 1];\n        array[i + 1] = temp;\n        sort = true;\n        compare[2] = true;\n      }\n      animations.push(compare);\n    }\n    size--;\n  } while (sort);\n\n  return animations;\n}\n\nexport function genInsertionSortAnimations(array) {\n  const animations = [];\n  return insertionSortHelper(array, array.length, animations);\n}\n\nfunction insertionSortHelper(array, size, animations) {\n  for (let i = 1; i < size; i++) {\n    var key = array[i];\n    var j = i - 1;\n    while (j >= 0 && array[j] > key) {\n      animations.push([j + 1, j]);\n      array[j + 1] = array[j];\n      j = j - 1;\n    }\n    array[j + 1] = key;\n  }\n  console.log(array);\n  return animations;\n}\n\nexport function genMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from \"react\";\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport { store } from \"react-notifications-component\";\nimport \"../animate.css\";\nimport \"./SortingVisualizer.css\";\nimport { genBubbleSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\nimport { genInsertionSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\nimport { genMergeSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\n\nconst ANIMATION_SPEED_MS = 10;\nconst PRIMARY_COLOR = \"#40e0d0\";\nconst SECONDARY_COLOR = \"#a7726e\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      width: parseInt(window.innerWidth),\n      height: parseInt(window.innerHeight),\n      algorithm: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    this.resetArray();\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: parseInt(window.innerWidth),\n      height: parseInt(window.innerHeight)\n    });\n  }\n\n  updateAlgorithm(alg = null) {\n    this.setState({\n      algorithm: alg.bind(this)\n    });\n    const sortButton = document.getElementsByClassName(\"sort-button\");\n    sortButton[0].style.color = \"#b1cc74\";\n  }\n\n  resetArray() {\n    const newArray = [];\n    const pad = 12;\n\n    this.updateWindowDimensions();\n    for (let i = 0; i < (this.state.width - pad * 2) / pad; i++) {\n      newArray.push(\n        randomIntFromInterval(\n          this.state.height / 6,\n          this.state.height - 55 - pad\n        )\n      );\n    }\n    this.setState({ array: newArray });\n  }\n\n  sendNotification(title_in, type_in, message_in) {\n    store.addNotification({\n      title: title_in,\n      message: message_in,\n      type: type_in,\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: {\n        duration: 3000,\n        onScreen: true\n      }\n    });\n  }\n\n  callSelectedSort() {\n    if (this.state.algorithm) {\n      const totalSortingTime = this.state.algorithm.call();\n      setTimeout(() => {\n        this.sendNotification(\"Success!\", \"success\", \"Sorting complete.\");\n      }, totalSortingTime);\n    } else {\n      this.sendNotification(\n        \"Error\",\n        \"danger\",\n        \"Please select a sorting algorithm.\"\n      );\n    }\n  }\n\n  mergeSort() {\n    const animations = genMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    return animations.length * ANIMATION_SPEED_MS;\n  }\n\n  insertionSort() {\n    const animations = genInsertionSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      setTimeout(() => {\n        barOneStyle.background = SECONDARY_COLOR;\n        barTwoStyle.background = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS - ANIMATION_SPEED_MS / 3);\n      setTimeout(() => {\n        barOneStyle.background = PRIMARY_COLOR;\n        barTwoStyle.background = PRIMARY_COLOR;\n      }, i * ANIMATION_SPEED_MS + ANIMATION_SPEED_MS / 3);\n      setTimeout(() => {\n        const barOneHeight = parseInt(barOneStyle.height);\n        barOneStyle.height = `${parseInt(barTwoStyle.height)}px`;\n        barTwoStyle.height = `${barOneHeight}px`;\n      }, i * ANIMATION_SPEED_MS);\n    }\n    return animations.length * ANIMATION_SPEED_MS;\n  }\n\n  bubbleSort() {\n    const animations = genBubbleSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx, swap] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      setTimeout(() => {\n        barOneStyle.background = SECONDARY_COLOR;\n        barTwoStyle.background = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS - ANIMATION_SPEED_MS / 3);\n      setTimeout(() => {\n        barOneStyle.background = PRIMARY_COLOR;\n        barTwoStyle.background = PRIMARY_COLOR;\n      }, i * ANIMATION_SPEED_MS + ANIMATION_SPEED_MS / 3);\n      if (swap) {\n        setTimeout(() => {\n          const barOneHeight = parseInt(barOneStyle.height);\n          barOneStyle.height = `${parseInt(barTwoStyle.height)}px`;\n          barTwoStyle.height = `${barOneHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    return animations.length * ANIMATION_SPEED_MS;\n  }\n\n  // quickSort() {}\n  // selectionSort() {}\n  // heapSort() {}\n  // radixSort() {}\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div>\n        <div className=\"opt-bar\">\n          <button className=\"opt-button\" onClick={() => this.resetArray()}>\n            Generate New Array\n          </button>\n          <button\n            className=\"opt-button\"\n            onClick={() => this.updateAlgorithm(this.mergeSort)}\n          >\n            Merge Sort\n          </button>\n          <button\n            className=\"opt-button\"\n            onClick={() => this.updateAlgorithm(this.insertionSort)}\n          >\n            Insertion Sort\n          </button>\n          <button\n            className=\"opt-button\"\n            onClick={() => this.updateAlgorithm(this.bubbleSort)}\n          >\n            Bubble Sort\n          </button>\n          <button\n            className=\"sort-button\"\n            onClick={() => this.callSelectedSort()}\n          >\n            Preform Sort\n          </button>\n\n          {/* <button onClick={() => this.quickSort()}>Quick Sort</button>\n          <button onClick={() => this.selectionSort()}>Selection Sort</button>\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\n          <button onClick={() => this.radixSort()}>Radix Sort</button> */}\n        </div>\n        <div className=\"array-container\">\n          <ReactNotification />\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ height: `${value}px` }}\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}